{"version":3,"sources":["../src/avrecording.js"],"names":["define","Log","ModalFactory","checkCanWork","navigator","mediaDevices","window","MediaRecorder","location","protocol","host","indexOf","Recorder","type","mediaElement","noMediaPlaceholder","button","filename","owner","settings","questionDiv","recorder","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","secondsRemaining","countdownTicker","addEventListener","e","debug","preventDefault","dataset","state","startRecording","stopRecording","uploadMediaToServer","setButtonLabel","fetchRequest","XMLHttpRequest","open","src","responseType","handleRecordingFetched","send","hidePlayerDuringRecording","parentElement","classList","add","remove","textContent","disableAllButtons","mediaConstraints","getUserMedia","then","handleCaptureStarting","catch","handleCaptureFailed","stream","options","getRecordingOptions","ondataavailable","handleDataAvailable","onstop","handleRecordingHasStopped","start","srcObject","muted","play","controls","startCountdownTimer","disabled","focus","event","data","size","maxUploadSize","localStorage","getItem","setItem","showAlert","removeItem","push","M","core_formchangechecker","pathname","endsWith","set_form_changed","stopCountdownTimer","stop","tracks","getTracks","i","length","blob","Blob","mimeType","URL","createObjectURL","notifyRecordingComplete","error","setPlaceholderMessage","stringName","name","replace","toLowerCase","enableAllButtons","timeLimit","updateTimerDisplay","setInterval","clearInterval","secs","mins","Math","round","pad","val","valString","target","status","response","formData","FormData","append","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","wwwroot","readyState","loaded","total","langString","a","innerText","util","get_string","audioBitsPerSecond","parseInt","audioBitRate","videoBitsPerSecond","videoBitRate","videoWidth","videoHeight","mimeTypes","isTypeSupported","disableOrEnableButtons","notifyButtonStatesChanged","enabled","querySelectorAll","forEach","AudioSettings","audio","VideoSettings","width","height","video","ideal","RecordRtcQuestion","questionId","document","getElementById","result","querySelector","recorderElements","widget","mediaType","recordingFilename","typeInfo","setSubmitButtonState","anyRecorded","submitButton","subject","create","types","ALERT","title","body","modal","show","init","js_pending","js_complete"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work inspired this.\n *\n * @package   qtype_recordrtc\n * @copyright 2019 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/log', 'core/modal_factory'], function(Log, ModalFactory) {\n\n    /**\n     * Verify that the question type can work. If not, show a warning.\n     *\n     * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n     */\n    function checkCanWork() {\n        if (!(navigator.mediaDevices && window.MediaRecorder)) {\n            return 'nowebrtc';\n        }\n\n        if (!(location.protocol === 'https:' || location.host.indexOf('localhost') !== -1)) {\n            return 'nothttps';\n        }\n\n        return 'ok';\n    }\n\n    /**\n     * Object for actually doing the recording.\n     *\n     * The recorder can be in one of 4 states, which is stored in a data-state\n     * attribute on the button. The states are:\n     *  - new:       there is no recording yet. Button shows 'Start recording'.\n     *  - recording: buttons shows a countdown of remaining time. Media is being recorded.\n     *  - saving:    buttons shows a progress indicator.\n     *  - recorded:  button shows 'Record again'.\n     *\n     * @param {(AudioSettings|VideoSettings)} type\n     * @param {HTMLMediaElement} mediaElement\n     * @param {HTMLMediaElement} noMediaPlaceholder\n     * @param {HTMLButtonElement} button\n     * @param {string} filename the name of the audio (.ogg) or video file (.webm)\n     * @param {Object} owner\n     * @param {Object} settings\n     * @param {Object} questionDiv\n     * @constructor\n     */\n    function Recorder(type, mediaElement, noMediaPlaceholder,\n                      button, filename, owner, settings, questionDiv) {\n        /**\n         * @type {Recorder} reference to this recorder, for use in event handlers.\n         */\n        var recorder = this;\n\n        /**\n         * @type {MediaStream} during recording, the stream of incoming media.\n         */\n        var mediaStream = null;\n\n        /**\n         * @type {MediaRecorder} the recorder that is capturing stream.\n         */\n        var mediaRecorder = null;\n\n        /**\n         * @type {Blob[]} the chunks of data that have been captured so far duing the current recording.\n         */\n        var chunks = [];\n\n        /**\n         * @type {number} number of bytes recorded so far, so we can auto-stop\n         * before hitting Moodle's file-size limit.\n         */\n        var bytesRecordedSoFar = 0;\n\n        /**\n         * @type {number} time left in seconds, so we can auto-stop at the time limit.\n         */\n        var secondsRemaining = 0;\n\n        /**\n         * @type {number} intervalID returned by setInterval() while the timer is running.\n         */\n        var countdownTicker = 0;\n\n        button.addEventListener('click', handleButtonClick);\n        this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n        /**\n         * Handles clicks on the start/stop button.\n         *\n         * @param {Event} e\n         */\n        function handleButtonClick(e) {\n            Log.debug('Start/stop button clicked.');\n            e.preventDefault();\n            switch (button.dataset.state) {\n                case 'new':\n                case 'recorded':\n                    startRecording();\n                    break;\n                case 'recording':\n                    stopRecording();\n                    break;\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked).\n         */\n        function startRecording() {\n\n            if (type.hidePlayerDuringRecording) {\n                mediaElement.parentElement.classList.add('hide');\n                noMediaPlaceholder.classList.remove('hide');\n                noMediaPlaceholder.textContent = '\\u00a0';\n            } else {\n                mediaElement.parentElement.classList.remove('hide');\n                noMediaPlaceholder.classList.add('hide');\n            }\n\n            // Change look of recording button.\n            button.classList.remove('btn-outline-danger');\n            button.classList.add('btn-danger');\n\n            // Disable other question buttons when current widget stared recording.\n            disableAllButtons();\n\n            // Empty the array containing the previously recorded chunks.\n            chunks = [];\n            bytesRecordedSoFar = 0;\n            Log.debug('Audio/video question: Starting recording with media constraints');\n            Log.debug(type.mediaConstraints);\n            navigator.mediaDevices.getUserMedia(type.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        }\n\n        /**\n         * Callback once getUserMedia has permission from the user to access the recording devices.\n         *\n         * @param {MediaStream} stream the stream to record.\n         */\n        function handleCaptureStarting(stream) {\n            mediaStream = stream;\n\n            // Initialize MediaRecorder events and start recording.\n            var options = getRecordingOptions();\n            Log.debug('Audio/video question: creating recorder with opptions');\n            Log.debug(options);\n            mediaRecorder = new MediaRecorder(stream, options);\n\n            mediaRecorder.ondataavailable = handleDataAvailable;\n            mediaRecorder.onstop = handleRecordingHasStopped;\n            Log.debug('Audio/video question: starting recording.');\n            mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n            // Setup the UI for during recording.\n            mediaElement.srcObject = stream;\n            mediaElement.muted = true;\n            if (!type.hidePlayerDuringRecording) {\n                mediaElement.play();\n                mediaElement.controls = false;\n            }\n            button.dataset.state = 'recording';\n            startCountdownTimer();\n\n            // Make button clickable again, to allow stopping recording.\n            button.disabled = false;\n            button.focus();\n        }\n\n        /**\n         * Callback that is called by the media system for each Chunk of data.\n         *\n         * @param {BlobEvent} event\n         */\n        function handleDataAvailable(event) {\n            Log.debug('Audio/video question: chunk of ' + event.data.size + ' bytes received.');\n\n            // Check there is space to store the next chunk, and if not stop.\n            bytesRecordedSoFar += event.data.size;\n            if (settings.maxUploadSize >= 0 && bytesRecordedSoFar >= settings.maxUploadSize) {\n\n                // Extra check to avoid alerting twice.\n                if (!localStorage.getItem('alerted')) {\n                    localStorage.setItem('alerted', 'true');\n                    stopRecording();\n                    owner.showAlert('nearingmaxsize');\n\n                } else {\n                    localStorage.removeItem('alerted');\n                }\n            }\n\n            // Store the next chunk of data.\n            chunks.push(event.data);\n\n            // Notify form-change-checker that there is now unsaved data.\n            // But, don't do this in question preview where it is just annoying.\n            if (typeof M.core_formchangechecker !== 'undefined' &&\n                !window.location.pathname.endsWith('/question/preview.php')) {\n                M.core_formchangechecker.set_form_changed();\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked or because we have reached a limit).\n         */\n        function stopRecording() {\n            // Disable the button while things change.\n            button.disabled = true;\n\n            // Stop the count-down timer.\n            stopCountdownTimer();\n\n            // Update the button.\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n\n            // Ask the recording to stop.\n            Log.debug('Audio/video question: stopping recording.');\n            mediaRecorder.stop();\n\n            // Also stop each individual MediaTrack.\n            var tracks = mediaStream.getTracks();\n            for (var i = 0; i < tracks.length; i++) {\n                tracks[i].stop();\n            }\n        }\n\n        /**\n         * Callback that is called by the media system once recording has finished.\n         */\n        function handleRecordingHasStopped() {\n            if (button.dataset.state === 'new') {\n                // This can happens if an error occurs when recording is starting. Do nothing.\n                return;\n            }\n\n            // Set source of audio player.\n            Log.debug('Audio/video question: recording stopped.');\n            var blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n            mediaElement.srcObject = null;\n            mediaElement.src = URL.createObjectURL(blob);\n\n            // Show audio player with controls enabled, and unmute.\n            mediaElement.muted = false;\n            mediaElement.controls = true;\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n            mediaElement.focus();\n\n            // Encure the button while things change.\n            button.disabled = true;\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'recorded';\n\n            if (chunks.length > 0) {\n                owner.notifyRecordingComplete(recorder);\n            }\n        }\n\n        /**\n         * Function that handles errors from the recorder.\n         *\n         * @param {DOMException} error\n         */\n        function handleCaptureFailed(error) {\n            Log.debug('Audio/video question: error received');\n            Log.debug(error);\n\n            setPlaceholderMessage('recordingfailed');\n            setButtonLabel('recordagain');\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'new';\n\n            if (mediaRecorder) {\n                mediaRecorder.stop();\n            }\n\n            // Changes 'CertainError' -> 'gumcertain' to match language string names.\n            var stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n            owner.showAlert(stringName);\n            enableAllButtons();\n        }\n\n        /**\n         * Start the countdown timer from settings.timeLimit.\n         */\n        function startCountdownTimer() {\n            secondsRemaining = settings.timeLimit;\n\n            updateTimerDisplay();\n            countdownTicker = setInterval(updateTimerDisplay, 1000);\n        }\n\n        /**\n         * Stop the countdown timer.\n         */\n        function stopCountdownTimer() {\n            if (countdownTicker !== 0) {\n                clearInterval(countdownTicker);\n                countdownTicker = 0;\n            }\n        }\n\n        /**\n         * Update the countdown timer, and stop recording if we have reached 0.\n         */\n        function updateTimerDisplay() {\n            var secs = secondsRemaining % 60;\n            var mins = Math.round((secondsRemaining - secs) / 60);\n            setButtonLabel('recordinginprogress', pad(mins) + ':' + pad(secs));\n\n            if (secondsRemaining === -1) {\n                stopRecording();\n            }\n            secondsRemaining -= 1;\n        }\n\n        /**\n         * Zero-pad a string to be at least two characters long.\n         *\n         * Used fro\n         * @param {number} val, e.g. 1 or 10\n         * @return {string} e.g. '01' or '10'.\n         */\n        function pad(val) {\n            var valString = val + '';\n\n            if (valString.length < 2) {\n                return '0' + valString;\n            } else {\n                return valString;\n            }\n        }\n\n        /**\n         * Upload the recorded media back to Moodle.\n         */\n        function uploadMediaToServer() {\n            setButtonLabel('uploadpreparing');\n\n            var fetchRequest = new XMLHttpRequest();\n\n            // Get media of audio/video tag.\n            fetchRequest.open('GET', mediaElement.src);\n            fetchRequest.responseType = 'blob';\n            fetchRequest.addEventListener('load', handleRecordingFetched);\n            fetchRequest.send();\n        }\n\n        /**\n         * Callback called once we have the data from the media element.\n         *\n         * @param {ProgressEvent} e\n         */\n        function handleRecordingFetched(e) {\n            var fetchRequest = e.target;\n            if (fetchRequest.status !== 200) {\n                // No data.\n                return;\n            }\n\n            // Blob is now the media that the audio/video tag's src pointed to.\n            var blob = fetchRequest.response;\n\n            // Create FormData to send to PHP filepicker-upload script.\n            var formData = new FormData();\n            formData.append('repo_upload_file', blob, filename);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('repo_id', settings.uploadRepositoryId);\n            formData.append('itemid', settings.draftItemId);\n            formData.append('savepath', '/');\n            formData.append('ctx_id', settings.contextId);\n            formData.append('overwrite', 1);\n\n            var uploadRequest = new XMLHttpRequest();\n            uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n            uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n            uploadRequest.addEventListener('error', handleUploadError);\n            uploadRequest.addEventListener('abort', handleUploadAbort);\n            uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n            uploadRequest.send(formData);\n        }\n\n        /**\n         * Callback for when the upload completes.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadReadyStateChanged(e) {\n            var uploadRequest = e.target;\n            if (uploadRequest.readyState === 4 && uploadRequest.status === 200) {\n                // When request finished and successful.\n                setButtonLabel('recordagain');\n                enableAllButtons();\n            } else if (uploadRequest.status === 404) {\n                setPlaceholderMessage('uploadfailed404');\n                enableAllButtons();\n            }\n        }\n\n        /**\n         * Callback for updating the upload progress.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadProgress(e) {\n            setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadError() {\n            setPlaceholderMessage('uploadfailed');\n            enableAllButtons();\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadAbort() {\n            setPlaceholderMessage('uploadaborted');\n            enableAllButtons();\n        }\n\n        /**\n         * Display a progress message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {Object|String} a optional variable to populate placeholder with\n         */\n        function setButtonLabel(langString, a) {\n            button.innerText = M.util.get_string(langString, 'qtype_recordrtc', a);\n        }\n\n        /**\n         * Display a message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {Object|String} a optional variable to populate placeholder with\n         */\n        function setPlaceholderMessage(langString, a) {\n            noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc', a);\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.remove('hide');\n        }\n\n        /**\n         * Select best options for the recording codec.\n         *\n         * @returns {Object}\n         */\n        function getRecordingOptions() {\n            var options = {};\n\n            // Get the relevant bit rates from settings.\n            if (type.name === 'audio') {\n                options.audioBitsPerSecond = parseInt(settings.audioBitRate, 10);\n            } else if (type.name === 'video') {\n                options.videoBitsPerSecond = parseInt(settings.videoBitRate, 10);\n                options.videoWidth = parseInt(settings.videoWidth, 10);\n                options.videoHeight = parseInt(settings.videoHeight, 10);\n            }\n\n            // Go through our list of mimeTypes, and take the first one that will work.\n            for (var i = 0; i < type.mimeTypes.length; i++) {\n                if (MediaRecorder.isTypeSupported(type.mimeTypes[i])) {\n                    options.mimeType = type.mimeTypes[i];\n                    break;\n                }\n            }\n\n            return options;\n        }\n\n        /**\n         * Enable all buttons in the question.\n         */\n        function enableAllButtons() {\n            disableOrEnableButtons(true);\n            owner.notifyButtonStatesChanged();\n        }\n\n        /**\n         * Disable all buttons in the question.\n         */\n        function disableAllButtons() {\n            disableOrEnableButtons(false);\n        }\n\n        /**\n         * Disables/enables other question buttons when current widget started recording/finished recording.\n         *\n         * @param {boolean} enabled true if the button should be enabled.\n         */\n        function disableOrEnableButtons(enabled = false) {\n            questionDiv.querySelectorAll('button, input[type=submit], input[type=button]').forEach(\n                function(button) {\n                    button.disabled = !enabled;\n                }\n            );\n        }\n    }\n\n    /**\n     * Object that controls the settings for recording audio.\n     *\n     * @constructor\n     */\n    function AudioSettings() {\n        this.name = 'audio';\n        this.hidePlayerDuringRecording = true;\n        this.mediaConstraints = {\n            audio: true\n        };\n        this.mimeTypes = [\n            'audio/webm;codecs=opus',\n            'audio/ogg;codecs=opus'\n        ];\n    }\n\n    /**\n     * Object that controls the settings for recording video.\n     *\n     * @param {number} width desired width.\n     * @param {number} height desired height.\n     * @constructor\n     */\n    function VideoSettings(width, height) {\n        this.name = 'video';\n        this.hidePlayerDuringRecording = false;\n        this.mediaConstraints = {\n            audio: true,\n            video: {\n                width: {ideal: width},\n                height: {ideal: height}\n            }\n        };\n        this.mimeTypes = [\n            'video/webm;codecs=vp9,opus',\n            'video/webm;codecs=h264,opus',\n            'video/webm;codecs=vp8,opus'\n        ];\n    }\n\n    /**\n     * Represents one record audio or video question.\n     *\n     * @param {string} questionId id of the outer question div.\n     * @param {Object} settings like audio bit rate.\n     * @constructor\n     */\n    function RecordRtcQuestion(questionId, settings) {\n        var questionDiv = document.getElementById(questionId);\n\n        // Check if the RTC API can work here.\n        var result = checkCanWork();\n        if (result === 'nothttps') {\n            questionDiv.querySelector('.https-warning').classList.remove('hide');\n            return;\n        } else if (result === 'nowebrtc') {\n            questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n            return;\n        }\n\n        // We may have more than one widget in a question.\n        var recorderElements = questionDiv.querySelectorAll('.audio-widget, .video-widget');\n        recorderElements.forEach(function(widget) {\n            // Get the key UI elements.\n            var type = widget.dataset.mediaType;\n            var button = widget.querySelector('.record-button button');\n            var mediaElement = widget.querySelector('.media-player ' + type);\n            var noMediaPlaceholder = widget.querySelector('.no-recording-placeholder');\n            var filename = widget.dataset.recordingFilename;\n\n            // Get the appropriate options.\n            var typeInfo;\n            if (type === 'audio') {\n                typeInfo = new AudioSettings();\n            } else {\n                typeInfo = new VideoSettings(settings.videoWidth, settings.videoHeight);\n            }\n\n            // Make the callback functions available.\n            this.showAlert = showAlert;\n            this.notifyRecordingComplete = notifyRecordingComplete;\n            this.notifyButtonStatesChanged = setSubmitButtonState;\n\n            // Create the recorder.\n            new Recorder(typeInfo, mediaElement, noMediaPlaceholder, button,\n                    filename, this, settings, questionDiv);\n        });\n        setSubmitButtonState();\n\n        /**\n         * Set the state of the question's submit button.\n         *\n         * If any recorder does not yet have a recording, then disable the button.\n         * Otherwise, enable it.\n         */\n        function setSubmitButtonState() {\n            var anyRecorded = false;\n            questionDiv.querySelectorAll('.audio-widget, .video-widget').forEach(function(widget) {\n                if (widget.querySelector('.record-button button').dataset.state === 'recorded') {\n                    anyRecorded = true;\n                }\n            });\n            var submitButton = questionDiv.querySelector('input.submit[type=submit]');\n            if (submitButton) {\n                submitButton.disabled = !anyRecorded;\n           }\n        }\n\n        /**\n         * Show a modal alert.\n         *\n         * @param {string} subject Subject is the content of the alert (which error the alert is for).\n         * @return {Promise}\n         */\n        function showAlert(subject) {\n            return ModalFactory.create({\n                type: ModalFactory.types.ALERT,\n                title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n                body: M.util.get_string(subject, 'qtype_recordrtc'),\n            }).then(function(modal) {\n                modal.show();\n                return modal;\n            });\n        }\n\n        /**\n         * Callback called when the recording is completed.\n         *\n         * @param {Recorder} recorder the recorder.\n         */\n        function notifyRecordingComplete(recorder) {\n            recorder.uploadMediaToServer();\n        }\n    }\n\n    return {\n        /**\n         * Initialise a record audio or video question.\n         *\n         * @param {string} questionId id of the outer question div.\n         * @param {Object} settings like audio bit rate.\n         */\n        init: function(questionId, settings) {\n            M.util.js_pending('init-' + questionId);\n            new RecordRtcQuestion(questionId, settings);\n            M.util.js_complete('init-' + questionId);\n        }\n    };\n});\n"],"file":"avrecording.min.js"}